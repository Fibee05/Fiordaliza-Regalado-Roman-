{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7d4bcc14-468a-482e-861e-2e55360bbf67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Todas las imágenes han sido generadas correctamente.\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "def create_blank_image(width, height, color=(255, 255, 255)):\n",
    "    return np.full((height, width, 3), color, dtype=np.uint8)\n",
    "\n",
    "# Paso 1: Crear una imagen en blanco\n",
    "image = create_blank_image(500, 500)\n",
    "cv2.imwrite(\"ImagenEnBlanco.png\", image)\n",
    "\n",
    "# Paso 2: Dibujar figuras geométricas\n",
    "image_figures = image.copy()\n",
    "cv2.line(image_figures, (0, 0), (499, 499), (255, 0, 0), 3)  # Línea azul\n",
    "cv2.rectangle(image_figures, (150, 150), (350, 350), (0, 255, 0), -1)  # Rectángulo verde\n",
    "cv2.circle(image_figures, (250, 250), 50, (0, 0, 255), -1)  # Círculo rojo\n",
    "cv2.imwrite(\"FigurasGeometricas.png\", image_figures)\n",
    "\n",
    "# Paso 3: Agregar texto\n",
    "image_text = image_figures.copy()\n",
    "cv2.putText(image_text, 'Fiordaliza', (180, 480), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)\n",
    "cv2.imwrite(\"ImagenConTexto.png\", image_text)\n",
    "\n",
    "# Mi opcion personal: Quise agregar el texto con un color amarillo más intenso y una fuente diferente  \n",
    "intense_yellow = (0, 230, 220)  # Color amarillo más intenso  \n",
    "image_text = image_figures.copy()  \n",
    "\n",
    "cv2.putText(image_text, 'Fiordaliza', (180, 480), cv2.FONT_HERSHEY_COMPLEX, 1, intense_yellow, 2)  \n",
    "cv2.imwrite(\"ImagenConTexto.png\", image_text)  \n",
    "\n",
    "# Paso 4: Manipulación de imágenes\n",
    "\n",
    "# Convertir la imagen a escala de grises\n",
    "grayscale_image = cv2.cvtColor(image_text, cv2.COLOR_BGR2GRAY)\n",
    "cv2.imwrite(\"ImagenEnGrises.png\", grayscale_image)\n",
    "\n",
    "# Redimensionar la imagen al doble de su tamaño\n",
    "resized_image = cv2.resize(image_text, (1000, 1000))\n",
    "cv2.imwrite(\"ImagenRedimensionada.png\", resized_image)\n",
    "\n",
    "#  Rotar la imagen 45 grados\n",
    "(h, w) = image_text.shape[:2]\n",
    "center = (w // 2, h // 2)\n",
    "rotation_matrix = cv2.getRotationMatrix2D(center, 45, 1.0)\n",
    "rotated_image = cv2.warpAffine(image_text, rotation_matrix, (w, h))\n",
    "cv2.imwrite(\"ManipulacionImag.png\", rotated_image)\n",
    "\n",
    "# Paso 5: Transformaciones avanzadas\n",
    "\n",
    "# Rotar la imagen 30 grados\n",
    "(h, w) = image_text.shape[:2]  # Obtener dimensiones\n",
    "center = (w // 2, h // 2)  # Definir el centro de rotación\n",
    "\n",
    "rotation_matrix_30 = cv2.getRotationMatrix2D(center, 30, 1.0)\n",
    "rotated_image_30 = cv2.warpAffine(image_text, rotation_matrix_30, (w, h))\n",
    "\n",
    "cv2.imwrite(\"ImagenRotada30.png\", rotated_image_30)  # Guardar la imagen rotada\n",
    "\n",
    "\n",
    "#  Transformación de perspectiva\n",
    "pts1 = np.float32([[50, 50], [450, 50], [50, 450], [450, 450]])\n",
    "pts2 = np.float32([[10, 100], [400, 50], [100, 400], [450, 450]])\n",
    "M = cv2.getPerspectiveTransform(pts1, pts2)\n",
    "perspective_image = cv2.warpPerspective(image_text, M, (500, 500))\n",
    "cv2.imwrite(\"ImagenPerspectiva.png\", perspective_image)\n",
    "\n",
    "#  Máscara de transparencia\n",
    "mask = np.zeros((500, 500), dtype=np.uint8)\n",
    "cv2.circle(mask, (250, 250), 100, 255, -1)  # Máscara circular\n",
    "masked_image = cv2.bitwise_and(image_text, image_text, mask=mask)\n",
    "cv2.imwrite(\"ImagenMascara.png\", masked_image)\n",
    "\n",
    "print(\"Todas las imágenes han sido generadas correctamente.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2204b89f-7c96-469b-9605-1dc124352f8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "\n",
    "# Lista de imágenes con sus nombres\n",
    "images = [\n",
    "    (\"ImagenEnBlanco.png\", \"Imagen en Blanco\"),\n",
    "    (\"FigurasGeometricas.png\", \"Figuras Geométricas\"),\n",
    "    (\"ImagenConTexto.png\", \"Imagen con Texto\"),\n",
    "    (\"ImagenEnGrises.png\", \"Imagen en Escala de Grises\"),\n",
    "    (\"ImagenRedimensionada.png\", \"Imagen Redimensionada\"),\n",
    "    (\"ManipulacionImag.png\", \"Imagen Rotada 45°\"),\n",
    "    (\"ImagenRotada30.png\", \"Imagen Rotada 30°\"),  # Nueva imagen añadida\n",
    "    (\"ImagenPerspectiva.png\", \"Transformación de Perspectiva\"),\n",
    "    (\"ImagenMascara.png\", \"Máscara de Transparencia\"),\n",
    "]\n",
    "\n",
    "# Mostrar cada imagen\n",
    "for file_name, window_name in images:\n",
    "    img = cv2.imread(file_name)  # Cargar la imagen\n",
    "    if img is None:\n",
    "        print(f\"Error: No se pudo cargar {file_name}\")\n",
    "        continue\n",
    "    \n",
    "    cv2.imshow(window_name, img)  # Mostrar imagen en una ventana\n",
    "\n",
    "# Esperar a que el usuario presione una tecla y cerrar todas las ventanas\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04301113-9af9-4ee0-9d5a-cddf1b715c58",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
